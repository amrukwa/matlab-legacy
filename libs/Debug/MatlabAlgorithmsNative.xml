<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MatlabAlgorithmsNative</name>
    </assembly>
    <members>
        <member name="T:MatlabAlgorithmsNative.Preprocessing">
            <summary>
            The Preprocessing class provides a CLS compliant, Object (native) interface to the
            MATLAB functions contained in the files:
            <newpara></newpara>
            ..\..\src\MATLAB\DiviK\libs\miscellaneous\fetch_thresholds.m
            <newpara></newpara>
            ..\..\src\MATLAB\pafft.m
            <newpara></newpara>
            ..\..\src\MATLAB\remove_baseline.m
            <newpara></newpara>
            ..\..\src\MATLAB\ticnorm.m
            </summary>
            <remarks>
            @Version 0.0
            </remarks>
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.#cctor">
            <summary internal= "true">
            The static constructor instantiates and initializes the MATLAB Runtime instance.
            </summary>
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.#ctor">
            <summary>
            Constructs a new instance of the Preprocessing class.
            </summary>
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.Finalize">
            <summary internal= "true">
            Class destructor called by the CLR garbage collector.
            </summary>
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.Dispose">
            <summary>
            Frees the native resources associated with this object
            </summary>
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.Dispose(System.Boolean)">
            <summary internal= "true">
            Internal dispose function
            </summary>
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.fetch_thresholds">
             <summary>
             Provides a single output, 0-input Objectinterface to the fetch_thresholds MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             FETCH_THRESHOLDS Decomposes parameters into Gaussian peaks and finds
             crossings
             thresholds = FETCH_THRESHOLDS(params) - returns cell containing all
             thresholds for every column of parameters. If no crossings are present,
             no threshold will be returned for specific parameter. Parameter params
             should be column vector with values of parameter investigates or matrix
             consisting of such column vectors. For matrix m x n a cell 1 x n will
             be returned where every field contains all available thresholds as
             column vector.
             Additional parameters:
             - 'MaxComponents' - (default 10)
             - 'CachePath' - (default '.')
             - 'Cache' - default false - no cache is created.
             - 'FigurePath' - decomposition plot is saved (default empty - no figure
             is plotted)
             - 'Threshold' - returns only thresholds associated with components of
             higher amplitude (default 0)
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.fetch_thresholds(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the fetch_thresholds MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             FETCH_THRESHOLDS Decomposes parameters into Gaussian peaks and finds
             crossings
             thresholds = FETCH_THRESHOLDS(params) - returns cell containing all
             thresholds for every column of parameters. If no crossings are present,
             no threshold will be returned for specific parameter. Parameter params
             should be column vector with values of parameter investigates or matrix
             consisting of such column vectors. For matrix m x n a cell 1 x n will
             be returned where every field contains all available thresholds as
             column vector.
             Additional parameters:
             - 'MaxComponents' - (default 10)
             - 'CachePath' - (default '.')
             - 'Cache' - default false - no cache is created.
             - 'FigurePath' - decomposition plot is saved (default empty - no figure
             is plotted)
             - 'Threshold' - returns only thresholds associated with components of
             higher amplitude (default 0)
             </remarks>
             <param name="params0">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.fetch_thresholds(System.Object,System.Object[])">
             <summary>
             Provides a single output, 2-input Objectinterface to the fetch_thresholds MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             FETCH_THRESHOLDS Decomposes parameters into Gaussian peaks and finds
             crossings
             thresholds = FETCH_THRESHOLDS(params) - returns cell containing all
             thresholds for every column of parameters. If no crossings are present,
             no threshold will be returned for specific parameter. Parameter params
             should be column vector with values of parameter investigates or matrix
             consisting of such column vectors. For matrix m x n a cell 1 x n will
             be returned where every field contains all available thresholds as
             column vector.
             Additional parameters:
             - 'MaxComponents' - (default 10)
             - 'CachePath' - (default '.')
             - 'Cache' - default false - no cache is created.
             - 'FigurePath' - decomposition plot is saved (default empty - no figure
             is plotted)
             - 'Threshold' - returns only thresholds associated with components of
             higher amplitude (default 0)
             </remarks>
             <param name="params0">Input argument #1</param>
             <param name="varargin">Array of Objects representing the input arguments 2
             through varargin.length+1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.fetch_thresholds(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the fetch_thresholds MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             FETCH_THRESHOLDS Decomposes parameters into Gaussian peaks and finds
             crossings
             thresholds = FETCH_THRESHOLDS(params) - returns cell containing all
             thresholds for every column of parameters. If no crossings are present,
             no threshold will be returned for specific parameter. Parameter params
             should be column vector with values of parameter investigates or matrix
             consisting of such column vectors. For matrix m x n a cell 1 x n will
             be returned where every field contains all available thresholds as
             column vector.
             Additional parameters:
             - 'MaxComponents' - (default 10)
             - 'CachePath' - (default '.')
             - 'Cache' - default false - no cache is created.
             - 'FigurePath' - decomposition plot is saved (default empty - no figure
             is plotted)
             - 'Threshold' - returns only thresholds associated with components of
             higher amplitude (default 0)
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.fetch_thresholds(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the fetch_thresholds MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             FETCH_THRESHOLDS Decomposes parameters into Gaussian peaks and finds
             crossings
             thresholds = FETCH_THRESHOLDS(params) - returns cell containing all
             thresholds for every column of parameters. If no crossings are present,
             no threshold will be returned for specific parameter. Parameter params
             should be column vector with values of parameter investigates or matrix
             consisting of such column vectors. For matrix m x n a cell 1 x n will
             be returned where every field contains all available thresholds as
             column vector.
             Additional parameters:
             - 'MaxComponents' - (default 10)
             - 'CachePath' - (default '.')
             - 'Cache' - default false - no cache is created.
             - 'FigurePath' - decomposition plot is saved (default empty - no figure
             is plotted)
             - 'Threshold' - returns only thresholds associated with components of
             higher amplitude (default 0)
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="params0">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.fetch_thresholds(System.Int32,System.Object,System.Object[])">
             <summary>
             Provides the standard 2-input Object interface to the fetch_thresholds MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             FETCH_THRESHOLDS Decomposes parameters into Gaussian peaks and finds
             crossings
             thresholds = FETCH_THRESHOLDS(params) - returns cell containing all
             thresholds for every column of parameters. If no crossings are present,
             no threshold will be returned for specific parameter. Parameter params
             should be column vector with values of parameter investigates or matrix
             consisting of such column vectors. For matrix m x n a cell 1 x n will
             be returned where every field contains all available thresholds as
             column vector.
             Additional parameters:
             - 'MaxComponents' - (default 10)
             - 'CachePath' - (default '.')
             - 'Cache' - default false - no cache is created.
             - 'FigurePath' - decomposition plot is saved (default empty - no figure
             is plotted)
             - 'Threshold' - returns only thresholds associated with components of
             higher amplitude (default 0)
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="params0">Input argument #1</param>
             <param name="varargin">Array of Objects representing the input arguments 2
             through varargin.length+1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.fetch_thresholds(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the fetch_thresholds function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             FETCH_THRESHOLDS Decomposes parameters into Gaussian peaks and finds
             crossings
             thresholds = FETCH_THRESHOLDS(params) - returns cell containing all
             thresholds for every column of parameters. If no crossings are present,
             no threshold will be returned for specific parameter. Parameter params
             should be column vector with values of parameter investigates or matrix
             consisting of such column vectors. For matrix m x n a cell 1 x n will
             be returned where every field contains all available thresholds as
             column vector.
             Additional parameters:
             - 'MaxComponents' - (default 10)
             - 'CachePath' - (default '.')
             - 'Cache' - default false - no cache is created.
             - 'FigurePath' - decomposition plot is saved (default empty - no figure
             is plotted)
             - 'Threshold' - returns only thresholds associated with components of
             higher amplitude (default 0)
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.pafft">
             <summary>
             Provides a single output, 0-input Objectinterface to the pafft MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             PAFFT Wraps adaptive_PAFFT in easy manner.
             aligned = PAFFT(mz, data) returns a matrix with aligned spectra. M/z
             are in columns, observations are in rows, the same as in matrix input
             data.
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.pafft(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the pafft MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             PAFFT Wraps adaptive_PAFFT in easy manner.
             aligned = PAFFT(mz, data) returns a matrix with aligned spectra. M/z
             are in columns, observations are in rows, the same as in matrix input
             data.
             </remarks>
             <param name="mz">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.pafft(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the pafft MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             PAFFT Wraps adaptive_PAFFT in easy manner.
             aligned = PAFFT(mz, data) returns a matrix with aligned spectra. M/z
             are in columns, observations are in rows, the same as in matrix input
             data.
             </remarks>
             <param name="mz">Input argument #1</param>
             <param name="data">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.pafft(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the pafft MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             PAFFT Wraps adaptive_PAFFT in easy manner.
             aligned = PAFFT(mz, data) returns a matrix with aligned spectra. M/z
             are in columns, observations are in rows, the same as in matrix input
             data.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.pafft(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the pafft MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             PAFFT Wraps adaptive_PAFFT in easy manner.
             aligned = PAFFT(mz, data) returns a matrix with aligned spectra. M/z
             are in columns, observations are in rows, the same as in matrix input
             data.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="mz">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.pafft(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the pafft MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             PAFFT Wraps adaptive_PAFFT in easy manner.
             aligned = PAFFT(mz, data) returns a matrix with aligned spectra. M/z
             are in columns, observations are in rows, the same as in matrix input
             data.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="mz">Input argument #1</param>
             <param name="data">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.pafft(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the pafft function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             PAFFT Wraps adaptive_PAFFT in easy manner.
             aligned = PAFFT(mz, data) returns a matrix with aligned spectra. M/z
             are in columns, observations are in rows, the same as in matrix input
             data.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.remove_baseline">
             <summary>
             Provides a single output, 0-input Objectinterface to the remove_baseline MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             REMOVE_BASELINE removes baseline from the data
             grounded = REMOVE_BASELINE(mz, data) returns data set where baseline is
             removed, with subsequent m/z in columns and observations in rows.
             Observations order from data matrix is preserved. Matrix data should
             have m/z in columns and observations in rows as well.
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.remove_baseline(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the remove_baseline MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             REMOVE_BASELINE removes baseline from the data
             grounded = REMOVE_BASELINE(mz, data) returns data set where baseline is
             removed, with subsequent m/z in columns and observations in rows.
             Observations order from data matrix is preserved. Matrix data should
             have m/z in columns and observations in rows as well.
             </remarks>
             <param name="mz">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.remove_baseline(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the remove_baseline MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             REMOVE_BASELINE removes baseline from the data
             grounded = REMOVE_BASELINE(mz, data) returns data set where baseline is
             removed, with subsequent m/z in columns and observations in rows.
             Observations order from data matrix is preserved. Matrix data should
             have m/z in columns and observations in rows as well.
             </remarks>
             <param name="mz">Input argument #1</param>
             <param name="data">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.remove_baseline(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the remove_baseline MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             REMOVE_BASELINE removes baseline from the data
             grounded = REMOVE_BASELINE(mz, data) returns data set where baseline is
             removed, with subsequent m/z in columns and observations in rows.
             Observations order from data matrix is preserved. Matrix data should
             have m/z in columns and observations in rows as well.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.remove_baseline(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the remove_baseline MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             REMOVE_BASELINE removes baseline from the data
             grounded = REMOVE_BASELINE(mz, data) returns data set where baseline is
             removed, with subsequent m/z in columns and observations in rows.
             Observations order from data matrix is preserved. Matrix data should
             have m/z in columns and observations in rows as well.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="mz">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.remove_baseline(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the remove_baseline MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             REMOVE_BASELINE removes baseline from the data
             grounded = REMOVE_BASELINE(mz, data) returns data set where baseline is
             removed, with subsequent m/z in columns and observations in rows.
             Observations order from data matrix is preserved. Matrix data should
             have m/z in columns and observations in rows as well.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="mz">Input argument #1</param>
             <param name="data">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.remove_baseline(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the remove_baseline function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             REMOVE_BASELINE removes baseline from the data
             grounded = REMOVE_BASELINE(mz, data) returns data set where baseline is
             removed, with subsequent m/z in columns and observations in rows.
             Observations order from data matrix is preserved. Matrix data should
             have m/z in columns and observations in rows as well.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.ticnorm">
             <summary>
             Provides a single output, 0-input Objectinterface to the ticnorm MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             TICNORM performs TIC normalization on dataset
             normalized = TICNORM(data) returns TIC normalized dataset. Columns
             correspond to m/z, rows to observations, same as in matrix data.
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.ticnorm(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the ticnorm MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             TICNORM performs TIC normalization on dataset
             normalized = TICNORM(data) returns TIC normalized dataset. Columns
             correspond to m/z, rows to observations, same as in matrix data.
             </remarks>
             <param name="data">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.ticnorm(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the ticnorm MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             TICNORM performs TIC normalization on dataset
             normalized = TICNORM(data) returns TIC normalized dataset. Columns
             correspond to m/z, rows to observations, same as in matrix data.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.ticnorm(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the ticnorm MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             TICNORM performs TIC normalization on dataset
             normalized = TICNORM(data) returns TIC normalized dataset. Columns
             correspond to m/z, rows to observations, same as in matrix data.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="data">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.ticnorm(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the ticnorm function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             TICNORM performs TIC normalization on dataset
             normalized = TICNORM(data) returns TIC normalized dataset. Columns
             correspond to m/z, rows to observations, same as in matrix data.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.WaitForFiguresToDie">
             <summary>
             This method will cause a MATLAB figure window to behave as a modal dialog box.
             The method will not return until all the figure windows associated with this
             component have been closed.
             </summary>
             <remarks>
             An application should only call this method when required to keep the
             MATLAB figure window from disappearing.  Other techniques, such as calling
             Console.ReadLine() from the application should be considered where
             possible.</remarks>
            
        </member>
        <member name="T:MatlabAlgorithmsNative.GmmModelling">
            <summary>
            The GmmModelling class provides a CLS compliant, Object (native) interface to the
            MATLAB functions contained in the files:
            <newpara></newpara>
            ..\..\src\MATLAB\apply_gmm.m
            <newpara></newpara>
            ..\..\src\MATLAB\estimate_gmm.m
            <newpara></newpara>
            ..\..\src\MATLAB\merge_gmm_model_components.m
            <newpara></newpara>
            ..\..\src\MATLAB\reduce_gmm_by_component_area.m
            <newpara></newpara>
            ..\..\src\MATLAB\reduce_gmm_by_component_height.m
            </summary>
            <remarks>
            @Version 0.0
            </remarks>
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.#cctor">
            <summary internal= "true">
            The static constructor instantiates and initializes the MATLAB Runtime instance.
            </summary>
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.#ctor">
            <summary>
            Constructs a new instance of the GmmModelling class.
            </summary>
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.Finalize">
            <summary internal= "true">
            Class destructor called by the CLR garbage collector.
            </summary>
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.Dispose">
            <summary>
            Frees the native resources associated with this object
            </summary>
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.Dispose(System.Boolean)">
            <summary internal= "true">
            Internal dispose function
            </summary>
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.apply_gmm">
             <summary>
             Provides a single output, 0-input Objectinterface to the apply_gmm MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             APPLY_GMM applies estimated model on data
             modelled = APPLY_GMM(mdl, data) returns data modelled using estimated
             GMM parameters.
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.apply_gmm(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the apply_gmm MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             APPLY_GMM applies estimated model on data
             modelled = APPLY_GMM(mdl, data) returns data modelled using estimated
             GMM parameters.
             </remarks>
             <param name="mdl">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.apply_gmm(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the apply_gmm MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             APPLY_GMM applies estimated model on data
             modelled = APPLY_GMM(mdl, data) returns data modelled using estimated
             GMM parameters.
             </remarks>
             <param name="mdl">Input argument #1</param>
             <param name="data">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.apply_gmm(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the apply_gmm MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             APPLY_GMM applies estimated model on data
             modelled = APPLY_GMM(mdl, data) returns data modelled using estimated
             GMM parameters.
             </remarks>
             <param name="mdl">Input argument #1</param>
             <param name="data">Input argument #2</param>
             <param name="mz">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.apply_gmm(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the apply_gmm MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             APPLY_GMM applies estimated model on data
             modelled = APPLY_GMM(mdl, data) returns data modelled using estimated
             GMM parameters.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.apply_gmm(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the apply_gmm MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             APPLY_GMM applies estimated model on data
             modelled = APPLY_GMM(mdl, data) returns data modelled using estimated
             GMM parameters.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="mdl">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.apply_gmm(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the apply_gmm MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             APPLY_GMM applies estimated model on data
             modelled = APPLY_GMM(mdl, data) returns data modelled using estimated
             GMM parameters.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="mdl">Input argument #1</param>
             <param name="data">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.apply_gmm(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the apply_gmm MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             APPLY_GMM applies estimated model on data
             modelled = APPLY_GMM(mdl, data) returns data modelled using estimated
             GMM parameters.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="mdl">Input argument #1</param>
             <param name="data">Input argument #2</param>
             <param name="mz">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.apply_gmm(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the apply_gmm function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             APPLY_GMM applies estimated model on data
             modelled = APPLY_GMM(mdl, data) returns data modelled using estimated
             GMM parameters.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.estimate_gmm">
             <summary>
             Provides a single output, 0-input Objectinterface to the estimate_gmm MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             ESTIMATE_GMM Estimates GMM model for given data
             mdl = ESTIMATE_GMM(mz, data, mz_thr) - estimates basic GMM model for dataset
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.estimate_gmm(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the estimate_gmm MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             ESTIMATE_GMM Estimates GMM model for given data
             mdl = ESTIMATE_GMM(mz, data, mz_thr) - estimates basic GMM model for dataset
             </remarks>
             <param name="mz">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.estimate_gmm(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the estimate_gmm MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             ESTIMATE_GMM Estimates GMM model for given data
             mdl = ESTIMATE_GMM(mz, data, mz_thr) - estimates basic GMM model for dataset
             </remarks>
             <param name="mz">Input argument #1</param>
             <param name="data">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.estimate_gmm(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the estimate_gmm MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             ESTIMATE_GMM Estimates GMM model for given data
             mdl = ESTIMATE_GMM(mz, data, mz_thr) - estimates basic GMM model for dataset
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.estimate_gmm(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the estimate_gmm MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             ESTIMATE_GMM Estimates GMM model for given data
             mdl = ESTIMATE_GMM(mz, data, mz_thr) - estimates basic GMM model for dataset
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="mz">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.estimate_gmm(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the estimate_gmm MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             ESTIMATE_GMM Estimates GMM model for given data
             mdl = ESTIMATE_GMM(mz, data, mz_thr) - estimates basic GMM model for dataset
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="mz">Input argument #1</param>
             <param name="data">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.estimate_gmm(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the estimate_gmm function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             ESTIMATE_GMM Estimates GMM model for given data
             mdl = ESTIMATE_GMM(mz, data, mz_thr) - estimates basic GMM model for dataset
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.merge_gmm_model_components">
             <summary>
             Provides a single output, 0-input Objectinterface to the
             merge_gmm_model_components MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             MERGE_GMM_MODEL_COMPONENTS
             reduced = MERGE_GMM_MODEL_COMPONENTS(mdl, original_mz, mean_spectrum, mz_thr)
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.merge_gmm_model_components(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the
             merge_gmm_model_components MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             MERGE_GMM_MODEL_COMPONENTS
             reduced = MERGE_GMM_MODEL_COMPONENTS(mdl, original_mz, mean_spectrum, mz_thr)
             </remarks>
             <param name="mdl">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.merge_gmm_model_components(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the
             merge_gmm_model_components MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             MERGE_GMM_MODEL_COMPONENTS
             reduced = MERGE_GMM_MODEL_COMPONENTS(mdl, original_mz, mean_spectrum, mz_thr)
             </remarks>
             <param name="mdl">Input argument #1</param>
             <param name="original_mz">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.merge_gmm_model_components(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the
             merge_gmm_model_components MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             MERGE_GMM_MODEL_COMPONENTS
             reduced = MERGE_GMM_MODEL_COMPONENTS(mdl, original_mz, mean_spectrum, mz_thr)
             </remarks>
             <param name="mdl">Input argument #1</param>
             <param name="original_mz">Input argument #2</param>
             <param name="mean_spectrum">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.merge_gmm_model_components(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 4-input Objectinterface to the
             merge_gmm_model_components MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             MERGE_GMM_MODEL_COMPONENTS
             reduced = MERGE_GMM_MODEL_COMPONENTS(mdl, original_mz, mean_spectrum, mz_thr)
             </remarks>
             <param name="mdl">Input argument #1</param>
             <param name="original_mz">Input argument #2</param>
             <param name="mean_spectrum">Input argument #3</param>
             <param name="mz_thr">Input argument #4</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.merge_gmm_model_components(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the merge_gmm_model_components
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             MERGE_GMM_MODEL_COMPONENTS
             reduced = MERGE_GMM_MODEL_COMPONENTS(mdl, original_mz, mean_spectrum, mz_thr)
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.merge_gmm_model_components(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the merge_gmm_model_components
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             MERGE_GMM_MODEL_COMPONENTS
             reduced = MERGE_GMM_MODEL_COMPONENTS(mdl, original_mz, mean_spectrum, mz_thr)
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="mdl">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.merge_gmm_model_components(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the merge_gmm_model_components
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             MERGE_GMM_MODEL_COMPONENTS
             reduced = MERGE_GMM_MODEL_COMPONENTS(mdl, original_mz, mean_spectrum, mz_thr)
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="mdl">Input argument #1</param>
             <param name="original_mz">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.merge_gmm_model_components(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the merge_gmm_model_components
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             MERGE_GMM_MODEL_COMPONENTS
             reduced = MERGE_GMM_MODEL_COMPONENTS(mdl, original_mz, mean_spectrum, mz_thr)
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="mdl">Input argument #1</param>
             <param name="original_mz">Input argument #2</param>
             <param name="mean_spectrum">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.merge_gmm_model_components(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the merge_gmm_model_components
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             MERGE_GMM_MODEL_COMPONENTS
             reduced = MERGE_GMM_MODEL_COMPONENTS(mdl, original_mz, mean_spectrum, mz_thr)
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="mdl">Input argument #1</param>
             <param name="original_mz">Input argument #2</param>
             <param name="mean_spectrum">Input argument #3</param>
             <param name="mz_thr">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.merge_gmm_model_components(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the merge_gmm_model_components function in which the
             input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             MERGE_GMM_MODEL_COMPONENTS
             reduced = MERGE_GMM_MODEL_COMPONENTS(mdl, original_mz, mean_spectrum, mz_thr)
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.reduce_gmm_by_component_area">
             <summary>
             Provides a single output, 0-input Objectinterface to the
             reduce_gmm_by_component_area MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             REDUCE_GMM_BY_COMPONENT_AREA
             reduced = REDUCE_GMM_BY_COMPONENT_AREA(mdl, original_mz, mean_spectrum)
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.reduce_gmm_by_component_area(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the
             reduce_gmm_by_component_area MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             REDUCE_GMM_BY_COMPONENT_AREA
             reduced = REDUCE_GMM_BY_COMPONENT_AREA(mdl, original_mz, mean_spectrum)
             </remarks>
             <param name="mdl">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.reduce_gmm_by_component_area(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the
             reduce_gmm_by_component_area MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             REDUCE_GMM_BY_COMPONENT_AREA
             reduced = REDUCE_GMM_BY_COMPONENT_AREA(mdl, original_mz, mean_spectrum)
             </remarks>
             <param name="mdl">Input argument #1</param>
             <param name="original_mz">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.reduce_gmm_by_component_area(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the
             reduce_gmm_by_component_area MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             REDUCE_GMM_BY_COMPONENT_AREA
             reduced = REDUCE_GMM_BY_COMPONENT_AREA(mdl, original_mz, mean_spectrum)
             </remarks>
             <param name="mdl">Input argument #1</param>
             <param name="original_mz">Input argument #2</param>
             <param name="mean_spectrum">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.reduce_gmm_by_component_area(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the
             reduce_gmm_by_component_area MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             REDUCE_GMM_BY_COMPONENT_AREA
             reduced = REDUCE_GMM_BY_COMPONENT_AREA(mdl, original_mz, mean_spectrum)
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.reduce_gmm_by_component_area(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the
             reduce_gmm_by_component_area MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             REDUCE_GMM_BY_COMPONENT_AREA
             reduced = REDUCE_GMM_BY_COMPONENT_AREA(mdl, original_mz, mean_spectrum)
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="mdl">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.reduce_gmm_by_component_area(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the
             reduce_gmm_by_component_area MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             REDUCE_GMM_BY_COMPONENT_AREA
             reduced = REDUCE_GMM_BY_COMPONENT_AREA(mdl, original_mz, mean_spectrum)
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="mdl">Input argument #1</param>
             <param name="original_mz">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.reduce_gmm_by_component_area(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the
             reduce_gmm_by_component_area MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             REDUCE_GMM_BY_COMPONENT_AREA
             reduced = REDUCE_GMM_BY_COMPONENT_AREA(mdl, original_mz, mean_spectrum)
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="mdl">Input argument #1</param>
             <param name="original_mz">Input argument #2</param>
             <param name="mean_spectrum">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.reduce_gmm_by_component_area(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the reduce_gmm_by_component_area function in which the
             input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             REDUCE_GMM_BY_COMPONENT_AREA
             reduced = REDUCE_GMM_BY_COMPONENT_AREA(mdl, original_mz, mean_spectrum)
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.reduce_gmm_by_component_height">
             <summary>
             Provides a single output, 0-input Objectinterface to the
             reduce_gmm_by_component_height MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             REDUCE_GMM_BY_COMPONENT_HEIGHT
             reduced = REDUCE_GMM_BY_COMPONENT_HEIGHT(mdl, original_mz, mean_spectrum)
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.reduce_gmm_by_component_height(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the
             reduce_gmm_by_component_height MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             REDUCE_GMM_BY_COMPONENT_HEIGHT
             reduced = REDUCE_GMM_BY_COMPONENT_HEIGHT(mdl, original_mz, mean_spectrum)
             </remarks>
             <param name="mdl">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.reduce_gmm_by_component_height(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the
             reduce_gmm_by_component_height MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             REDUCE_GMM_BY_COMPONENT_HEIGHT
             reduced = REDUCE_GMM_BY_COMPONENT_HEIGHT(mdl, original_mz, mean_spectrum)
             </remarks>
             <param name="mdl">Input argument #1</param>
             <param name="original_mz">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.reduce_gmm_by_component_height(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the
             reduce_gmm_by_component_height MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             REDUCE_GMM_BY_COMPONENT_HEIGHT
             reduced = REDUCE_GMM_BY_COMPONENT_HEIGHT(mdl, original_mz, mean_spectrum)
             </remarks>
             <param name="mdl">Input argument #1</param>
             <param name="original_mz">Input argument #2</param>
             <param name="mean_spectrum">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.reduce_gmm_by_component_height(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the
             reduce_gmm_by_component_height MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             REDUCE_GMM_BY_COMPONENT_HEIGHT
             reduced = REDUCE_GMM_BY_COMPONENT_HEIGHT(mdl, original_mz, mean_spectrum)
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.reduce_gmm_by_component_height(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the
             reduce_gmm_by_component_height MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             REDUCE_GMM_BY_COMPONENT_HEIGHT
             reduced = REDUCE_GMM_BY_COMPONENT_HEIGHT(mdl, original_mz, mean_spectrum)
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="mdl">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.reduce_gmm_by_component_height(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the
             reduce_gmm_by_component_height MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             REDUCE_GMM_BY_COMPONENT_HEIGHT
             reduced = REDUCE_GMM_BY_COMPONENT_HEIGHT(mdl, original_mz, mean_spectrum)
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="mdl">Input argument #1</param>
             <param name="original_mz">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.reduce_gmm_by_component_height(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the
             reduce_gmm_by_component_height MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             REDUCE_GMM_BY_COMPONENT_HEIGHT
             reduced = REDUCE_GMM_BY_COMPONENT_HEIGHT(mdl, original_mz, mean_spectrum)
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="mdl">Input argument #1</param>
             <param name="original_mz">Input argument #2</param>
             <param name="mean_spectrum">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.reduce_gmm_by_component_height(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the reduce_gmm_by_component_height function in which
             the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             REDUCE_GMM_BY_COMPONENT_HEIGHT
             reduced = REDUCE_GMM_BY_COMPONENT_HEIGHT(mdl, original_mz, mean_spectrum)
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmModelling.WaitForFiguresToDie">
             <summary>
             This method will cause a MATLAB figure window to behave as a modal dialog box.
             The method will not return until all the figure windows associated with this
             component have been closed.
             </summary>
             <remarks>
             An application should only call this method when required to keep the
             MATLAB figure window from disappearing.  Other techniques, such as calling
             Console.ReadLine() from the application should be considered where
             possible.</remarks>
            
        </member>
        <member name="T:MatlabAlgorithmsNative.Segmentation">
            <summary>
            The Segmentation class provides a CLS compliant, Object (native) interface to the
            MATLAB functions contained in the files:
            <newpara></newpara>
            ..\..\src\MATLAB\DiviK\libs\divik_library\divik.m
            </summary>
            <remarks>
            @Version 0.0
            </remarks>
        </member>
        <member name="M:MatlabAlgorithmsNative.Segmentation.#cctor">
            <summary internal= "true">
            The static constructor instantiates and initializes the MATLAB Runtime instance.
            </summary>
        </member>
        <member name="M:MatlabAlgorithmsNative.Segmentation.#ctor">
            <summary>
            Constructs a new instance of the Segmentation class.
            </summary>
        </member>
        <member name="M:MatlabAlgorithmsNative.Segmentation.Finalize">
            <summary internal= "true">
            Class destructor called by the CLR garbage collector.
            </summary>
        </member>
        <member name="M:MatlabAlgorithmsNative.Segmentation.Dispose">
            <summary>
            Frees the native resources associated with this object
            </summary>
        </member>
        <member name="M:MatlabAlgorithmsNative.Segmentation.Dispose(System.Boolean)">
            <summary internal= "true">
            Internal dispose function
            </summary>
        </member>
        <member name="M:MatlabAlgorithmsNative.Segmentation.divik">
             <summary>
             Provides a single output, 0-input Objectinterface to the divik MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             DIVIK Performs filtering &amp; clustering recursively.
             partition = DIVIK( data, xy )
             [partition, res_struct] = DIVIK( ___ )
             partition = DIVIK( ___, 'Name', 'Value' ) - allows to specify additional
             parameters:
             - MaxK - maximal number of clusters considered (default 10)
             - Level - maximal depth of splitting (default 3)
             - UseLevels - states, whether to use levels of depth or size criterion for
             stop (default true, uses depth of recurence)
             - AmplitudeFiltration - states whether to use filtration of low abundance
             features at top level (default true)
             - VarianceFiltration - states whether to use adaptive filtration of
             non-informative features with respect to variance for every region (default
             true)
             - PercentSizeLimit - the percentage of inital size used for stopping the
             algorithm when size criterion is applied (default 0.001 for 0.1   of initial
             size)
             - FeaturePreservationLimit - the percentage of features preserved for sure
             during filtration procedures (default 0.05 for at least 5   of features\
             preserved)
             - Metric - metric used in clustering (default 'pearson')
             - PlotPartitions - states whether to plot partitions at top level (default
             false)
             - PlotRecursively - states whether to plot partitions at all levels, works
             only if PlotPartitions is set true (default false)
             - DecompositionPlots - states whether to plot decompositions of amplitude
             and variance at top level (default false)
             - DecompositionPlotsRecursively - states whether to make decomposition plots
             at all levels, works only if DecompositionPlots is set true (default false)
             - MaxComponentsForDecomposition - sets the maximal considered number of
             components used for decomposition of amplitude and variance (default 10)
             - OutPath - sets the path to directory where all outputs may be stored
             (default '.')
             - CachePath - sets the path to directory where cache may be stored (default
             '.')
             Cache - enables caching feature (default true)
             Verbose - sets verbosity (default false)
             KmeansOpts - additional options passed to k-means algorithm (see K_MEANS)
             (default {})
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Segmentation.divik(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the divik MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             DIVIK Performs filtering &amp; clustering recursively.
             partition = DIVIK( data, xy )
             [partition, res_struct] = DIVIK( ___ )
             partition = DIVIK( ___, 'Name', 'Value' ) - allows to specify additional
             parameters:
             - MaxK - maximal number of clusters considered (default 10)
             - Level - maximal depth of splitting (default 3)
             - UseLevels - states, whether to use levels of depth or size criterion for
             stop (default true, uses depth of recurence)
             - AmplitudeFiltration - states whether to use filtration of low abundance
             features at top level (default true)
             - VarianceFiltration - states whether to use adaptive filtration of
             non-informative features with respect to variance for every region (default
             true)
             - PercentSizeLimit - the percentage of inital size used for stopping the
             algorithm when size criterion is applied (default 0.001 for 0.1   of initial
             size)
             - FeaturePreservationLimit - the percentage of features preserved for sure
             during filtration procedures (default 0.05 for at least 5   of features\
             preserved)
             - Metric - metric used in clustering (default 'pearson')
             - PlotPartitions - states whether to plot partitions at top level (default
             false)
             - PlotRecursively - states whether to plot partitions at all levels, works
             only if PlotPartitions is set true (default false)
             - DecompositionPlots - states whether to plot decompositions of amplitude
             and variance at top level (default false)
             - DecompositionPlotsRecursively - states whether to make decomposition plots
             at all levels, works only if DecompositionPlots is set true (default false)
             - MaxComponentsForDecomposition - sets the maximal considered number of
             components used for decomposition of amplitude and variance (default 10)
             - OutPath - sets the path to directory where all outputs may be stored
             (default '.')
             - CachePath - sets the path to directory where cache may be stored (default
             '.')
             Cache - enables caching feature (default true)
             Verbose - sets verbosity (default false)
             KmeansOpts - additional options passed to k-means algorithm (see K_MEANS)
             (default {})
             </remarks>
             <param name="data">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Segmentation.divik(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the divik MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             DIVIK Performs filtering &amp; clustering recursively.
             partition = DIVIK( data, xy )
             [partition, res_struct] = DIVIK( ___ )
             partition = DIVIK( ___, 'Name', 'Value' ) - allows to specify additional
             parameters:
             - MaxK - maximal number of clusters considered (default 10)
             - Level - maximal depth of splitting (default 3)
             - UseLevels - states, whether to use levels of depth or size criterion for
             stop (default true, uses depth of recurence)
             - AmplitudeFiltration - states whether to use filtration of low abundance
             features at top level (default true)
             - VarianceFiltration - states whether to use adaptive filtration of
             non-informative features with respect to variance for every region (default
             true)
             - PercentSizeLimit - the percentage of inital size used for stopping the
             algorithm when size criterion is applied (default 0.001 for 0.1   of initial
             size)
             - FeaturePreservationLimit - the percentage of features preserved for sure
             during filtration procedures (default 0.05 for at least 5   of features\
             preserved)
             - Metric - metric used in clustering (default 'pearson')
             - PlotPartitions - states whether to plot partitions at top level (default
             false)
             - PlotRecursively - states whether to plot partitions at all levels, works
             only if PlotPartitions is set true (default false)
             - DecompositionPlots - states whether to plot decompositions of amplitude
             and variance at top level (default false)
             - DecompositionPlotsRecursively - states whether to make decomposition plots
             at all levels, works only if DecompositionPlots is set true (default false)
             - MaxComponentsForDecomposition - sets the maximal considered number of
             components used for decomposition of amplitude and variance (default 10)
             - OutPath - sets the path to directory where all outputs may be stored
             (default '.')
             - CachePath - sets the path to directory where cache may be stored (default
             '.')
             Cache - enables caching feature (default true)
             Verbose - sets verbosity (default false)
             KmeansOpts - additional options passed to k-means algorithm (see K_MEANS)
             (default {})
             </remarks>
             <param name="data">Input argument #1</param>
             <param name="xy">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Segmentation.divik(System.Object,System.Object,System.Object[])">
             <summary>
             Provides a single output, 3-input Objectinterface to the divik MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             DIVIK Performs filtering &amp; clustering recursively.
             partition = DIVIK( data, xy )
             [partition, res_struct] = DIVIK( ___ )
             partition = DIVIK( ___, 'Name', 'Value' ) - allows to specify additional
             parameters:
             - MaxK - maximal number of clusters considered (default 10)
             - Level - maximal depth of splitting (default 3)
             - UseLevels - states, whether to use levels of depth or size criterion for
             stop (default true, uses depth of recurence)
             - AmplitudeFiltration - states whether to use filtration of low abundance
             features at top level (default true)
             - VarianceFiltration - states whether to use adaptive filtration of
             non-informative features with respect to variance for every region (default
             true)
             - PercentSizeLimit - the percentage of inital size used for stopping the
             algorithm when size criterion is applied (default 0.001 for 0.1   of initial
             size)
             - FeaturePreservationLimit - the percentage of features preserved for sure
             during filtration procedures (default 0.05 for at least 5   of features\
             preserved)
             - Metric - metric used in clustering (default 'pearson')
             - PlotPartitions - states whether to plot partitions at top level (default
             false)
             - PlotRecursively - states whether to plot partitions at all levels, works
             only if PlotPartitions is set true (default false)
             - DecompositionPlots - states whether to plot decompositions of amplitude
             and variance at top level (default false)
             - DecompositionPlotsRecursively - states whether to make decomposition plots
             at all levels, works only if DecompositionPlots is set true (default false)
             - MaxComponentsForDecomposition - sets the maximal considered number of
             components used for decomposition of amplitude and variance (default 10)
             - OutPath - sets the path to directory where all outputs may be stored
             (default '.')
             - CachePath - sets the path to directory where cache may be stored (default
             '.')
             Cache - enables caching feature (default true)
             Verbose - sets verbosity (default false)
             KmeansOpts - additional options passed to k-means algorithm (see K_MEANS)
             (default {})
             </remarks>
             <param name="data">Input argument #1</param>
             <param name="xy">Input argument #2</param>
             <param name="varargin">Array of Objects representing the input arguments 3
             through varargin.length+2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Segmentation.divik(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the divik MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             DIVIK Performs filtering &amp; clustering recursively.
             partition = DIVIK( data, xy )
             [partition, res_struct] = DIVIK( ___ )
             partition = DIVIK( ___, 'Name', 'Value' ) - allows to specify additional
             parameters:
             - MaxK - maximal number of clusters considered (default 10)
             - Level - maximal depth of splitting (default 3)
             - UseLevels - states, whether to use levels of depth or size criterion for
             stop (default true, uses depth of recurence)
             - AmplitudeFiltration - states whether to use filtration of low abundance
             features at top level (default true)
             - VarianceFiltration - states whether to use adaptive filtration of
             non-informative features with respect to variance for every region (default
             true)
             - PercentSizeLimit - the percentage of inital size used for stopping the
             algorithm when size criterion is applied (default 0.001 for 0.1   of initial
             size)
             - FeaturePreservationLimit - the percentage of features preserved for sure
             during filtration procedures (default 0.05 for at least 5   of features\
             preserved)
             - Metric - metric used in clustering (default 'pearson')
             - PlotPartitions - states whether to plot partitions at top level (default
             false)
             - PlotRecursively - states whether to plot partitions at all levels, works
             only if PlotPartitions is set true (default false)
             - DecompositionPlots - states whether to plot decompositions of amplitude
             and variance at top level (default false)
             - DecompositionPlotsRecursively - states whether to make decomposition plots
             at all levels, works only if DecompositionPlots is set true (default false)
             - MaxComponentsForDecomposition - sets the maximal considered number of
             components used for decomposition of amplitude and variance (default 10)
             - OutPath - sets the path to directory where all outputs may be stored
             (default '.')
             - CachePath - sets the path to directory where cache may be stored (default
             '.')
             Cache - enables caching feature (default true)
             Verbose - sets verbosity (default false)
             KmeansOpts - additional options passed to k-means algorithm (see K_MEANS)
             (default {})
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Segmentation.divik(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the divik MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             DIVIK Performs filtering &amp; clustering recursively.
             partition = DIVIK( data, xy )
             [partition, res_struct] = DIVIK( ___ )
             partition = DIVIK( ___, 'Name', 'Value' ) - allows to specify additional
             parameters:
             - MaxK - maximal number of clusters considered (default 10)
             - Level - maximal depth of splitting (default 3)
             - UseLevels - states, whether to use levels of depth or size criterion for
             stop (default true, uses depth of recurence)
             - AmplitudeFiltration - states whether to use filtration of low abundance
             features at top level (default true)
             - VarianceFiltration - states whether to use adaptive filtration of
             non-informative features with respect to variance for every region (default
             true)
             - PercentSizeLimit - the percentage of inital size used for stopping the
             algorithm when size criterion is applied (default 0.001 for 0.1   of initial
             size)
             - FeaturePreservationLimit - the percentage of features preserved for sure
             during filtration procedures (default 0.05 for at least 5   of features\
             preserved)
             - Metric - metric used in clustering (default 'pearson')
             - PlotPartitions - states whether to plot partitions at top level (default
             false)
             - PlotRecursively - states whether to plot partitions at all levels, works
             only if PlotPartitions is set true (default false)
             - DecompositionPlots - states whether to plot decompositions of amplitude
             and variance at top level (default false)
             - DecompositionPlotsRecursively - states whether to make decomposition plots
             at all levels, works only if DecompositionPlots is set true (default false)
             - MaxComponentsForDecomposition - sets the maximal considered number of
             components used for decomposition of amplitude and variance (default 10)
             - OutPath - sets the path to directory where all outputs may be stored
             (default '.')
             - CachePath - sets the path to directory where cache may be stored (default
             '.')
             Cache - enables caching feature (default true)
             Verbose - sets verbosity (default false)
             KmeansOpts - additional options passed to k-means algorithm (see K_MEANS)
             (default {})
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="data">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Segmentation.divik(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the divik MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             DIVIK Performs filtering &amp; clustering recursively.
             partition = DIVIK( data, xy )
             [partition, res_struct] = DIVIK( ___ )
             partition = DIVIK( ___, 'Name', 'Value' ) - allows to specify additional
             parameters:
             - MaxK - maximal number of clusters considered (default 10)
             - Level - maximal depth of splitting (default 3)
             - UseLevels - states, whether to use levels of depth or size criterion for
             stop (default true, uses depth of recurence)
             - AmplitudeFiltration - states whether to use filtration of low abundance
             features at top level (default true)
             - VarianceFiltration - states whether to use adaptive filtration of
             non-informative features with respect to variance for every region (default
             true)
             - PercentSizeLimit - the percentage of inital size used for stopping the
             algorithm when size criterion is applied (default 0.001 for 0.1   of initial
             size)
             - FeaturePreservationLimit - the percentage of features preserved for sure
             during filtration procedures (default 0.05 for at least 5   of features\
             preserved)
             - Metric - metric used in clustering (default 'pearson')
             - PlotPartitions - states whether to plot partitions at top level (default
             false)
             - PlotRecursively - states whether to plot partitions at all levels, works
             only if PlotPartitions is set true (default false)
             - DecompositionPlots - states whether to plot decompositions of amplitude
             and variance at top level (default false)
             - DecompositionPlotsRecursively - states whether to make decomposition plots
             at all levels, works only if DecompositionPlots is set true (default false)
             - MaxComponentsForDecomposition - sets the maximal considered number of
             components used for decomposition of amplitude and variance (default 10)
             - OutPath - sets the path to directory where all outputs may be stored
             (default '.')
             - CachePath - sets the path to directory where cache may be stored (default
             '.')
             Cache - enables caching feature (default true)
             Verbose - sets verbosity (default false)
             KmeansOpts - additional options passed to k-means algorithm (see K_MEANS)
             (default {})
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="data">Input argument #1</param>
             <param name="xy">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Segmentation.divik(System.Int32,System.Object,System.Object,System.Object[])">
             <summary>
             Provides the standard 3-input Object interface to the divik MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             DIVIK Performs filtering &amp; clustering recursively.
             partition = DIVIK( data, xy )
             [partition, res_struct] = DIVIK( ___ )
             partition = DIVIK( ___, 'Name', 'Value' ) - allows to specify additional
             parameters:
             - MaxK - maximal number of clusters considered (default 10)
             - Level - maximal depth of splitting (default 3)
             - UseLevels - states, whether to use levels of depth or size criterion for
             stop (default true, uses depth of recurence)
             - AmplitudeFiltration - states whether to use filtration of low abundance
             features at top level (default true)
             - VarianceFiltration - states whether to use adaptive filtration of
             non-informative features with respect to variance for every region (default
             true)
             - PercentSizeLimit - the percentage of inital size used for stopping the
             algorithm when size criterion is applied (default 0.001 for 0.1   of initial
             size)
             - FeaturePreservationLimit - the percentage of features preserved for sure
             during filtration procedures (default 0.05 for at least 5   of features\
             preserved)
             - Metric - metric used in clustering (default 'pearson')
             - PlotPartitions - states whether to plot partitions at top level (default
             false)
             - PlotRecursively - states whether to plot partitions at all levels, works
             only if PlotPartitions is set true (default false)
             - DecompositionPlots - states whether to plot decompositions of amplitude
             and variance at top level (default false)
             - DecompositionPlotsRecursively - states whether to make decomposition plots
             at all levels, works only if DecompositionPlots is set true (default false)
             - MaxComponentsForDecomposition - sets the maximal considered number of
             components used for decomposition of amplitude and variance (default 10)
             - OutPath - sets the path to directory where all outputs may be stored
             (default '.')
             - CachePath - sets the path to directory where cache may be stored (default
             '.')
             Cache - enables caching feature (default true)
             Verbose - sets verbosity (default false)
             KmeansOpts - additional options passed to k-means algorithm (see K_MEANS)
             (default {})
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="data">Input argument #1</param>
             <param name="xy">Input argument #2</param>
             <param name="varargin">Array of Objects representing the input arguments 3
             through varargin.length+2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Segmentation.divik(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the divik function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             DIVIK Performs filtering &amp; clustering recursively.
             partition = DIVIK( data, xy )
             [partition, res_struct] = DIVIK( ___ )
             partition = DIVIK( ___, 'Name', 'Value' ) - allows to specify additional
             parameters:
             - MaxK - maximal number of clusters considered (default 10)
             - Level - maximal depth of splitting (default 3)
             - UseLevels - states, whether to use levels of depth or size criterion for
             stop (default true, uses depth of recurence)
             - AmplitudeFiltration - states whether to use filtration of low abundance
             features at top level (default true)
             - VarianceFiltration - states whether to use adaptive filtration of
             non-informative features with respect to variance for every region (default
             true)
             - PercentSizeLimit - the percentage of inital size used for stopping the
             algorithm when size criterion is applied (default 0.001 for 0.1   of initial
             size)
             - FeaturePreservationLimit - the percentage of features preserved for sure
             during filtration procedures (default 0.05 for at least 5   of features\
             preserved)
             - Metric - metric used in clustering (default 'pearson')
             - PlotPartitions - states whether to plot partitions at top level (default
             false)
             - PlotRecursively - states whether to plot partitions at all levels, works
             only if PlotPartitions is set true (default false)
             - DecompositionPlots - states whether to plot decompositions of amplitude
             and variance at top level (default false)
             - DecompositionPlotsRecursively - states whether to make decomposition plots
             at all levels, works only if DecompositionPlots is set true (default false)
             - MaxComponentsForDecomposition - sets the maximal considered number of
             components used for decomposition of amplitude and variance (default 10)
             - OutPath - sets the path to directory where all outputs may be stored
             (default '.')
             - CachePath - sets the path to directory where cache may be stored (default
             '.')
             Cache - enables caching feature (default true)
             Verbose - sets verbosity (default false)
             KmeansOpts - additional options passed to k-means algorithm (see K_MEANS)
             (default {})
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Segmentation.WaitForFiguresToDie">
             <summary>
             This method will cause a MATLAB figure window to behave as a modal dialog box.
             The method will not return until all the figure windows associated with this
             component have been closed.
             </summary>
             <remarks>
             An application should only call this method when required to keep the
             MATLAB figure window from disappearing.  Other techniques, such as calling
             Console.ReadLine() from the application should be considered where
             possible.</remarks>
            
        </member>
        <member name="T:MatlabAlgorithmsNative.GmmFiltering">
            <summary>
            The GmmFiltering class provides a CLS compliant, Object (native) interface to the
            MATLAB functions contained in the files:
            <newpara></newpara>
            ..\..\src\MATLAB\DiviK\libs\miscellaneous\fetch_thresholds.m
            </summary>
            <remarks>
            @Version 0.0
            </remarks>
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmFiltering.#cctor">
            <summary internal= "true">
            The static constructor instantiates and initializes the MATLAB Runtime instance.
            </summary>
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmFiltering.#ctor">
            <summary>
            Constructs a new instance of the GmmFiltering class.
            </summary>
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmFiltering.Finalize">
            <summary internal= "true">
            Class destructor called by the CLR garbage collector.
            </summary>
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmFiltering.Dispose">
            <summary>
            Frees the native resources associated with this object
            </summary>
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmFiltering.Dispose(System.Boolean)">
            <summary internal= "true">
            Internal dispose function
            </summary>
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmFiltering.fetch_thresholds">
             <summary>
             Provides a single output, 0-input Objectinterface to the fetch_thresholds MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             FETCH_THRESHOLDS Decomposes parameters into Gaussian peaks and finds
             crossings
             thresholds = FETCH_THRESHOLDS(params) - returns cell containing all
             thresholds for every column of parameters. If no crossings are present,
             no threshold will be returned for specific parameter. Parameter params
             should be column vector with values of parameter investigates or matrix
             consisting of such column vectors. For matrix m x n a cell 1 x n will
             be returned where every field contains all available thresholds as
             column vector.
             Additional parameters:
             - 'MaxComponents' - (default 10)
             - 'CachePath' - (default '.')
             - 'Cache' - default false - no cache is created.
             - 'FigurePath' - decomposition plot is saved (default empty - no figure
             is plotted)
             - 'Threshold' - returns only thresholds associated with components of
             higher amplitude (default 0)
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmFiltering.fetch_thresholds(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the fetch_thresholds MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             FETCH_THRESHOLDS Decomposes parameters into Gaussian peaks and finds
             crossings
             thresholds = FETCH_THRESHOLDS(params) - returns cell containing all
             thresholds for every column of parameters. If no crossings are present,
             no threshold will be returned for specific parameter. Parameter params
             should be column vector with values of parameter investigates or matrix
             consisting of such column vectors. For matrix m x n a cell 1 x n will
             be returned where every field contains all available thresholds as
             column vector.
             Additional parameters:
             - 'MaxComponents' - (default 10)
             - 'CachePath' - (default '.')
             - 'Cache' - default false - no cache is created.
             - 'FigurePath' - decomposition plot is saved (default empty - no figure
             is plotted)
             - 'Threshold' - returns only thresholds associated with components of
             higher amplitude (default 0)
             </remarks>
             <param name="params0">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmFiltering.fetch_thresholds(System.Object,System.Object[])">
             <summary>
             Provides a single output, 2-input Objectinterface to the fetch_thresholds MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             FETCH_THRESHOLDS Decomposes parameters into Gaussian peaks and finds
             crossings
             thresholds = FETCH_THRESHOLDS(params) - returns cell containing all
             thresholds for every column of parameters. If no crossings are present,
             no threshold will be returned for specific parameter. Parameter params
             should be column vector with values of parameter investigates or matrix
             consisting of such column vectors. For matrix m x n a cell 1 x n will
             be returned where every field contains all available thresholds as
             column vector.
             Additional parameters:
             - 'MaxComponents' - (default 10)
             - 'CachePath' - (default '.')
             - 'Cache' - default false - no cache is created.
             - 'FigurePath' - decomposition plot is saved (default empty - no figure
             is plotted)
             - 'Threshold' - returns only thresholds associated with components of
             higher amplitude (default 0)
             </remarks>
             <param name="params0">Input argument #1</param>
             <param name="varargin">Array of Objects representing the input arguments 2
             through varargin.length+1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmFiltering.fetch_thresholds(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the fetch_thresholds MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             FETCH_THRESHOLDS Decomposes parameters into Gaussian peaks and finds
             crossings
             thresholds = FETCH_THRESHOLDS(params) - returns cell containing all
             thresholds for every column of parameters. If no crossings are present,
             no threshold will be returned for specific parameter. Parameter params
             should be column vector with values of parameter investigates or matrix
             consisting of such column vectors. For matrix m x n a cell 1 x n will
             be returned where every field contains all available thresholds as
             column vector.
             Additional parameters:
             - 'MaxComponents' - (default 10)
             - 'CachePath' - (default '.')
             - 'Cache' - default false - no cache is created.
             - 'FigurePath' - decomposition plot is saved (default empty - no figure
             is plotted)
             - 'Threshold' - returns only thresholds associated with components of
             higher amplitude (default 0)
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmFiltering.fetch_thresholds(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the fetch_thresholds MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             FETCH_THRESHOLDS Decomposes parameters into Gaussian peaks and finds
             crossings
             thresholds = FETCH_THRESHOLDS(params) - returns cell containing all
             thresholds for every column of parameters. If no crossings are present,
             no threshold will be returned for specific parameter. Parameter params
             should be column vector with values of parameter investigates or matrix
             consisting of such column vectors. For matrix m x n a cell 1 x n will
             be returned where every field contains all available thresholds as
             column vector.
             Additional parameters:
             - 'MaxComponents' - (default 10)
             - 'CachePath' - (default '.')
             - 'Cache' - default false - no cache is created.
             - 'FigurePath' - decomposition plot is saved (default empty - no figure
             is plotted)
             - 'Threshold' - returns only thresholds associated with components of
             higher amplitude (default 0)
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="params0">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmFiltering.fetch_thresholds(System.Int32,System.Object,System.Object[])">
             <summary>
             Provides the standard 2-input Object interface to the fetch_thresholds MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             FETCH_THRESHOLDS Decomposes parameters into Gaussian peaks and finds
             crossings
             thresholds = FETCH_THRESHOLDS(params) - returns cell containing all
             thresholds for every column of parameters. If no crossings are present,
             no threshold will be returned for specific parameter. Parameter params
             should be column vector with values of parameter investigates or matrix
             consisting of such column vectors. For matrix m x n a cell 1 x n will
             be returned where every field contains all available thresholds as
             column vector.
             Additional parameters:
             - 'MaxComponents' - (default 10)
             - 'CachePath' - (default '.')
             - 'Cache' - default false - no cache is created.
             - 'FigurePath' - decomposition plot is saved (default empty - no figure
             is plotted)
             - 'Threshold' - returns only thresholds associated with components of
             higher amplitude (default 0)
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="params0">Input argument #1</param>
             <param name="varargin">Array of Objects representing the input arguments 2
             through varargin.length+1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmFiltering.fetch_thresholds(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the fetch_thresholds function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             FETCH_THRESHOLDS Decomposes parameters into Gaussian peaks and finds
             crossings
             thresholds = FETCH_THRESHOLDS(params) - returns cell containing all
             thresholds for every column of parameters. If no crossings are present,
             no threshold will be returned for specific parameter. Parameter params
             should be column vector with values of parameter investigates or matrix
             consisting of such column vectors. For matrix m x n a cell 1 x n will
             be returned where every field contains all available thresholds as
             column vector.
             Additional parameters:
             - 'MaxComponents' - (default 10)
             - 'CachePath' - (default '.')
             - 'Cache' - default false - no cache is created.
             - 'FigurePath' - decomposition plot is saved (default empty - no figure
             is plotted)
             - 'Threshold' - returns only thresholds associated with components of
             higher amplitude (default 0)
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.GmmFiltering.WaitForFiguresToDie">
             <summary>
             This method will cause a MATLAB figure window to behave as a modal dialog box.
             The method will not return until all the figure windows associated with this
             component have been closed.
             </summary>
             <remarks>
             An application should only call this method when required to keep the
             MATLAB figure window from disappearing.  Other techniques, such as calling
             Console.ReadLine() from the application should be considered where
             possible.</remarks>
            
        </member>
    </members>
</doc>
